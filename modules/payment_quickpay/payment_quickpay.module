<?php

/**
 * @file
 * Implements QuickPay payment method for Payment module.
 */

/**
 * Implements hook_menu().
 */
function payment_quickpay_menu() {
  // Redirect form for payments.
  $items['payment/quickpay/form/%entity_object/%'] = array(
    'load arguments' => array('payment'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payment_quickpay_form', 3),
    'access callback' => 'payment_quickpay_menu_access',
    'access arguments' => array(3, 4),
    'file' => 'payment_quickpay.pages.inc',
    'type' => MENU_CALLBACK,
  );
  // Page for returning the user to from Quickpay.
  $items['payment/quickpay/return/%entity_object/%/%'] = array(
    'load arguments' => array('payment'),
    'page callback' => 'payment_quickpay_return_page',
    'page arguments' => array(3, 5),
    'access callback' => 'payment_quickpay_menu_access',
    'access arguments' => array(3, 4),
    'file' => 'payment_quickpay.pages.inc',
    'type' => MENU_CALLBACK,
  );
  // Payment capture tab on payment entity.
  $items['payment/%entity_object/capture'] = array(
    'load arguments' => array('payment'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payment_quickpay_capture_form', 1),
    'access callback' => 'payment_quickpay_capture_access',
    'access arguments' => array(1),
    'title' => 'Capture',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 10,
    'file' => 'payment_quickpay.pages.inc',
  );

  return $items;
}

/**
 * Menu access callback for the payment form and return page.
 *
 * @param Payment $payment
 *  The payment entity.
 * @param $token
 *  URL token.
 *
 * @return
 *  Boolean for access.
 */
function payment_quickpay_menu_access(Payment $payment, $token) {
  return drupal_valid_token($token, $payment->pid);
}

/**
 * Menu access callback for the payment capture tab.
 *
 * @param Payment $payment
 *  The payment entity.
 *
 * @return
 *  Boolean for access.
 */
function payment_quickpay_capture_access(Payment $payment) {
  // Don't allow access for a Payment that uses another method.
  if ($payment->method->controller->name != 'QuickpayPaymentMethodController') {
    return FALSE;
  }

  // Return 'update' access.
  return payment_access('update', $payment);
}

/**
 * Payment method configuration form elements callback.
 */
function payment_quickpay_method_configuration($form, &$form_state) {
  // Hand over to the Quickpay class to give us the configuration form.
  $controller_data = $form_state['payment_method']->controller_data;
  return Quickpay::settingsForm($controller_data);
}

/**
 * Validation callback for payment method configuration form elements callback.
 */
function payment_quickpay_method_configuration_validate($form, &$form_state) {
  // Write the form values to the payment method entity. These are then
  // intercepted by payment_quickpay_payment_method_insert()/update() and stored
  // as variables. This is because payment method entities don't have any
  // capacity to store configuration -- see https://www.drupal.org/node/2682573.
  $values = drupal_array_get_nested_value($form_state['values'], $form['#parents']);

  $properties = array(
    'merchant',
    'private_key',
    'agreement_id',
    'agreement_api_key',
    'order_prefix',
    'language',
    'accepted_cards',
    'test_mode',
    'debug',
    'popup',
  );

  foreach ($properties as $property) {
    if (isset($values[$property])) {
      $form_state['payment_method']->controller_data[$property] = $values[$property];
    }
  }
}

/**
 * Implements hook_entity_load().
 */
function payment_quickpay_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment_method') {
    foreach ($entities as $payment_method) {
      if ($payment_method->controller->name == 'QuickpayPaymentMethodController') {
        $payment_method->controller_data
                = variable_get('payment_quickpay_' . $payment_method->pmid . '_controller_data', array());
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function payment_quickpay_payment_method_insert(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'QuickpayPaymentMethodController') {
    variable_set('payment_quickpay_' . $payment_method->pmid . '_controller_data',
            $payment_method->controller_data);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function payment_quickpay_payment_method_update(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'QuickpayPaymentMethodController') {
    variable_set('payment_quickpay_' . $payment_method->pmid . '_controller_data',
            $payment_method->controller_data);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function payment_quickpay_payment_method_delete(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'QuickpayPaymentMethodController') {
    variable_del('payment_quickpay_' . $payment_method->pmid . '_controller_data');
  }
}

/**
 * Implements hook_quickpay_factory().
 */
function payment_quickpay_quickpay_factory($payment_id) {
  // Load the Payment to get its settings.
  $payment = entity_load_single('payment', $payment_id);
  return new Quickpay($payment->method->controller_data);
}

/**
 * Implements hook_quickpay_callback().
 */
function payment_quickpay_quickpay_callback($payment_id, $txn) {
  // Load the payment entity.
  $payment = entity_load_single('payment', $payment_id);

  // Update the payment based on the state of the Quickpay transation.
  if ($txn->success()) {
    // Transaction was successful. Whether funds have been transferred or not
    // depends on whether the autocapture option was passed to Quickpay.
    if (empty($payment->context_data['autocapture'])) {
      $payment_status = PAYMENT_STATUS_PENDING;
    }
    else {
      $payment_status = PAYMENT_STATUS_SUCCESS;
    }
  }
  else {
    $payment_status = PAYMENT_STATUS_FAILED;
  }
  $payment->setStatus(new PaymentStatusItem($payment_status));

  // Store the Quickpay remote ID in the Payment's context_data, which is
  // possibly an abuse, but the method_data property doesn't get saved in the
  // Payment entity: see https://www.drupal.org/node/2691623.
  $payment->context_data['remote_id'] = $txn->store();

  entity_save('payment', $payment);

  // Don't call Payment->finish() here, as that calls the payment context's
  // finish callback, which is for outputting messages to the user and
  // redirecting them -- here we're being loaded by the Quickpay server.
  // This is taken care of in payment_quickpay_return_page().
}
