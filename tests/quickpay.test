<?php

/**
 * @file
 *
 * Simple test suite for the Quickpay module. Only tests the core API.
 */

/**
 * Unit tests of basic Quickpay functionality.
 */
class QuickPayUnitTest extends DrupalUnitTestCase {
  protected $cards = array(
    'dk' => '1000020000000006',
    'dk-rejected' => '1000020000000014',
    'dk-expired' => '1000020000000022',
    'dk-no-capture' => '1000020000000030',
    'dk-no-refund' => '1000020000000048',
    'dk-no-cancel' => '1000020000000055',
    'dk-no-recurring' => '1000020000000063',
  );

  /**
   * Tell Simpletest about us.
   */
  public static function getInfo() {
    return array(
      'name' => t('QuickPay'),
      'description' => t("Tests that core QuickPay functions work. <em>WARNING:</em> This assumes that the used QuickPay account is running in test mode. Don't run this on a production account."),
      'group' => 'Quickpay Tests',
    );
  }

  /**
   * Setup for tests.
   */
  public function setUp() {
    require_once dirname(__FILE__) . '/../quickpay.transaction.inc';
    // Account set up for testing
    $settings = array(
      'merchant' => '13356',
      'private_key' => '45da874f95db23e9f9b39e97eeb64d853e80087a1835244bcd9751d2e5d88dfa',
      'agreement_id' => '47222',
      'agreement_api_key' => '244bab73a955aab6fa02ba296ac58d2a9d764649f6b33f46a2fcdcc81d950e5c',
      'order_prefix' => 'st_',
      'log_to_debug' => TRUE,
    );

    $settings['order_prefix'] .= time() . 't';
    parent::setup('quickpay');
    $this->qp = new Quickpay($settings);
  }

  /**
   * Test core functionality.
   */
  public function testCore() {
    $txn = $this->qp->authorize($this->cards['dk'], '0319', '123', 1, 100, 'DKK');
    $this->assertTrue($txn->success(), "Authorize works.");
    $this->assertEqual($txn->lastState(), 'authorize', "Transaction state is 'authorized'.");

    // This should fail.
    try {
      $txn->capture(200);
      $this->fail("Capturing too much should throw exception.");
    }
    catch (Exception $e) {
      $this->pass("Capturing too much throws exception.");
    }
    $this->assertEqual($txn->lastState(), 'authorize', "Transaction state is still 'authorized'.");

    $txn2 = $this->qp->transaction($txn->store());
    $txn2->status();
    $this->assertEqual($txn2->lastState(), 'authorize', "Transaction state is properly loaded.");

    // But this should work.
    $txn->capture(100);
    $this->assertTrue($txn->success(), "Can capture authorized amount.");
    $this->assertEqual($txn->lastState(), 'capture', "Transaction state is 'captured'.");

    $txn2 = $this->qp->transaction($txn->store());
    $this->assertEqual($txn->lastState(), 'capture', "Transaction state is properly loaded.");

    // Test capture failure.
    $txn = $this->qp->authorize($this->cards['dk-no-capture'], '0319', '123', 8, 100, 'DKK');
    $this->assertTrue($txn->success(), "Authorize works.");
    $this->assertEqual($txn->lastState(), 'authorize', "Transaction state is 'authorized'.");

    // Try to capture and be rejected.
    $txn->capture(100);
    $this->assertFalse($txn->success(), "Rejected capture is properly handled.");
    $this->assertEqual($txn->lastState(), 'capture', "Transaction state is 'capture' after rejection.");

    // Lets try partial capture...
    $txn = $this->qp->authorize($this->cards['dk'], '0319', '123', 2, 100, 'DKK');
    $this->assertTrue($txn->success(), "Authorize works.");
    $this->assertEqual($txn->lastState(), 'authorize', "Transaction state is 'authorized'.");

    // This should work.
    $txn->capture(30);
    $this->assertTrue($txn->success(), "Can capture less than authorized amount.");
    $this->assertEqual($txn->lastState(), 'capture', "Transaction state is 'captured'.");
    $this->assertEqual($txn->balance(), 70, "Balance is right.");

    // Now capture the rest.
    $txn->capture(70);
    $this->assertTrue($txn->success(), "Can capture the rest of the authorized amount.");
    $this->assertEqual($txn->lastState(), 'capture', "Transaction state is 'captured'.");
    $this->assertEqual($txn->balance(), 0, "Balance is right.");
  }

  /**
   * Test autocapture.
   */
  public function testAutocapture() {
    $txn = $this->qp->authorize($this->cards['dk'], '0319', '123', 1, 100, 'DKK', array('autocapture' => TRUE));
    $this->assertTrue($txn->success(), "Authorize with autocapture works.");
    $this->assertEqual($txn->lastState(), 'capture', "Transaction state is 'captured'.");

    // This should fail.
    try {
      $txn->capture(1);
      $this->fail("Capturing on autocaptured transaction should throw exception.");
    }
    catch (Exception $e) {
      $this->pass("Cannot capture on autocaptured transaction");
    }
    $this->assertEqual($txn->lastState(), 'capture', "Transaction state is still 'captured'.");
  }

  /**
   * Test renew.
   */
  // public function testRenew() {
  //   $txn = $this->qp->authorize($this->cards['dk'], '0319', '123', 5, 100, 'DKK');
  //   $this->assertTrue($txn->success(), "Authorize works.");
  //   $this->assertEqual($txn->lastState(), 'authorize', "Transaction state is 'authorized'.");

  //   $txn->renew();
  //   // Not much we can check but that the request didn't fail.
  //   $this->assertTrue($txn->success(), "Renew works.");
  //   $this->assertEqual($txn->lastState(), 'authorize', "Transaction state is still 'authorized'.");
  // }

  /**
   * Test cancel.
   */
  public function testCancel() {
    $txn = $this->qp->authorize($this->cards['dk'], '0319', '123', 6, 100, 'DKK');
    $this->assertTrue($txn->success(), "Authorize works.");
    $this->assertEqual($txn->lastState(), 'authorize', "Transaction state is 'authorized'.");

    $txn->cancel();
    $this->assertTrue($txn->success(), "Cancel works.");
    // Check that the transaction state is now cancel.
    $this->assertEqual($txn->lastState(), 'cancel', "Transaction state is 'cancelled'.");
  }

  /**
   * Test refunds.
   */
  public function testRefund() {
    // Create a transaction.
    $txn = $this->qp->authorize($this->cards['dk'], '0319', '123', 7, 100, 'DKK');
    $this->assertTrue($txn->success(), "Authorize works.");
    $this->assertEqual($txn->lastState(), 'authorize', "Transaction state is 'authorized'.");

    // Capture part.
    $txn->capture(50);
    $this->assertTrue($txn->success(), "Can capture less than authorized amount.");
    $this->assertEqual($txn->lastState(), 'capture', "Transaction state is 'captured'.");
    $this->assertEqual($txn->balance(), 50, "Balance is correct.");

    // Refund some.
    $txn->refund(20);
    $this->assertTrue($txn->success(), "Can refund part of captured amount.");
    $this->assertEqual($txn->lastState(), 'refund', "Transaction state is 'refunded'.");
    $this->assertEqual($txn->balance(), 70, "Balance is correct.");
  }

  /**
   * Test subscribe.
   */
 //  public function testSubscribe() {
 //    // Create a transaction.
 //    $sub_txn = $this->qp->subscribe($this->cards['dk'], '0319', '123', 8, 'test subscription', 100, 'DKK');
 //    $this->assertTrue($sub_txn->success(), "Subscribe works.");
 //    $this->assertTrue($sub_txn->state, 'subscribe', "Transaction state is 'subscribed'.");

 //    // Use the subscribed transaction to authorize a payment.
 //    $txn = $sub_txn->recurring(9, 100);
 //    $this->assertTrue($txn->success(), "Recurring works.");
 //    $this->assertTrue($txn->state == QuickpayTransaction::AUTHORIZED, "Transaction state is 'authorized'.");

 //    // Capture.
 //    $txn->capture(100);
 //    $this->assertTrue($txn->success(), "Can capture from subscription.");
 //    $this->assertTrue($txn->state == QuickpayTransaction::CAPTURED, "Transaction state is 'captured'.");

 //    // Use the subscribed transaction to authorize another payment.
 //    $txn = $sub_txn->recurring(10, 100, array('autocapture' => TRUE));
 //    $this->assertTrue($txn->success(), "Recurring with autocapture works.");
 //    $this->assertTrue($txn->state == QuickpayTransaction::CAPTURED, "Transaction state is 'captured'.");

 //    $sub_txn->cancel();
 //    $this->assertTrue($sub_txn->success(), "Cancelling subscription works.");
 //    $this->assertTrue($sub_txn->state == QuickpayTransaction::CANCELLED, "Transaction state is 'cancelled'.");

 //    $txn = $sub_txn->recurring(11, 100);
 //    $this->assertFalse($txn->success(), "Recurring on cancelled subscription doesn't work.");
 // }

  /**
   * Test status.
   */
  public function testStatus() {
    try {
      $txn = $this->qp->transaction('1');
      $txn->amount();
      $this->fail("Using non-existent transaction throws an exception.");
    }
    catch (QuickpayException $e) {
      $this->pass("Using non-existent transaction throws an exception.");
    }
  }

  public function testHashPath() {
    module_load_include('module', 'quickpay');
    $path = 'a/quick/test/with/a/few/path/components';
    $hash_path = _quickpay_hash_path($path);

    $this->assertTrue(_quickpay_hash_check(explode('/', $hash_path)), "Path hash accepts correct hash path.");

    // Change a char.
    $hash_path = preg_replace('{/a/}', '/b/', $hash_path);
    $this->assertFalse(_quickpay_hash_check(explode('/', $hash_path)), "Path hash rejects tampered hash path.");
  }
}
